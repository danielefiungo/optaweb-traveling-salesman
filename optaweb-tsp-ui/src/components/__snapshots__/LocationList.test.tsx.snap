// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Location List Component should render correctly with a few routes 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <locationList
    distance="10"
    domicileId={1}
    loadHandler={[MockFunction]}
    maxDistance={1}
    removeHandler={[MockFunction]}
    route={
      Array [
        Object {
          "id": 1,
          "lat": 1.345678,
          "lng": 1.345678,
        },
        Object {
          "id": 2,
          "lat": 2.345678,
          "lng": 2.345678,
        },
        Object {
          "id": 3,
          "lat": 3.676111,
          "lng": 3.568333,
        },
      ]
    }
    selectHandler={[MockFunction]}
    ws={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <br />,
        "Locations: ",
        3,
        <TripData
          distance={10}
          maxDistance={1}
        />,
        <hr />,
        <DataList
          aria-label="Ciao"
          className=""
        >
          <DataListItem
            aria-labelledby="check-1"
            className=""
            isExpanded={true}
          >
            <DataListCell
              className=""
              width={1}
            >
              <span
                id="check-1"
              >
                Location 
                1
              </span>
            </DataListCell>
            <DataListAction
              aria-label="Actions"
              aria-labelledby="check-action-item1 check-action-action1"
              className=""
              id="check-action-action1"
            >
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={true}
                isFocus={false}
                isHover={false}
                onClick={[Function]}
                type="button"
                variant="link"
              >
                <TimesIcon
                  color="currentColor"
                  size="sm"
                  title={null}
                />
              </Button>
            </DataListAction>
          </DataListItem>
          <DataListItem
            aria-labelledby="check-2"
            className=""
            isExpanded={true}
          >
            <DataListCell
              className=""
              width={1}
            >
              <span
                id="check-2"
              >
                Location 
                2
              </span>
            </DataListCell>
            <DataListAction
              aria-label="Actions"
              aria-labelledby="check-action-item1 check-action-action1"
              className=""
              id="check-action-action1"
            >
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[Function]}
                type="button"
                variant="link"
              >
                <TimesIcon
                  color="currentColor"
                  size="sm"
                  title={null}
                />
              </Button>
            </DataListAction>
          </DataListItem>
          <DataListItem
            aria-labelledby="check-3"
            className=""
            isExpanded={true}
          >
            <DataListCell
              className=""
              width={1}
            >
              <span
                id="check-3"
              >
                Location 
                3
              </span>
            </DataListCell>
            <DataListAction
              aria-label="Actions"
              aria-labelledby="check-action-item1 check-action-action1"
              className=""
              id="check-action-action1"
            >
              <Button
                aria-label={null}
                className=""
                component="button"
                isActive={false}
                isBlock={false}
                isDisabled={false}
                isFocus={false}
                isHover={false}
                onClick={[Function]}
                type="button"
                variant="link"
              >
                <TimesIcon
                  color="currentColor"
                  size="sm"
                  title={null}
                />
              </Button>
            </DataListAction>
          </DataListItem>
        </DataList>,
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "br",
      },
      "Locations: ",
      3,
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "distance": 10,
          "maxDistance": 1,
        },
        "ref": null,
        "rendered": null,
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "host",
        "props": Object {},
        "ref": null,
        "rendered": null,
        "type": "hr",
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "aria-label": "Ciao",
          "children": Array [
            <DataListItem
              aria-labelledby="check-1"
              className=""
              isExpanded={true}
            >
              <DataListCell
                className=""
                width={1}
              >
                <span
                  id="check-1"
                >
                  Location 
                  1
                </span>
              </DataListCell>
              <DataListAction
                aria-label="Actions"
                aria-labelledby="check-action-item1 check-action-action1"
                className=""
                id="check-action-action1"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={true}
                  isFocus={false}
                  isHover={false}
                  onClick={[Function]}
                  type="button"
                  variant="link"
                >
                  <TimesIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
              </DataListAction>
            </DataListItem>,
            <DataListItem
              aria-labelledby="check-2"
              className=""
              isExpanded={true}
            >
              <DataListCell
                className=""
                width={1}
              >
                <span
                  id="check-2"
                >
                  Location 
                  2
                </span>
              </DataListCell>
              <DataListAction
                aria-label="Actions"
                aria-labelledby="check-action-item1 check-action-action1"
                className=""
                id="check-action-action1"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[Function]}
                  type="button"
                  variant="link"
                >
                  <TimesIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
              </DataListAction>
            </DataListItem>,
            <DataListItem
              aria-labelledby="check-3"
              className=""
              isExpanded={true}
            >
              <DataListCell
                className=""
                width={1}
              >
                <span
                  id="check-3"
                >
                  Location 
                  3
                </span>
              </DataListCell>
              <DataListAction
                aria-label="Actions"
                aria-labelledby="check-action-item1 check-action-action1"
                className=""
                id="check-action-action1"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[Function]}
                  type="button"
                  variant="link"
                >
                  <TimesIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
              </DataListAction>
            </DataListItem>,
          ],
          "className": "",
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": "1",
            "nodeType": "function",
            "props": Object {
              "aria-labelledby": "check-1",
              "children": Array [
                <DataListCell
                  className=""
                  width={1}
                >
                  <span
                    id="check-1"
                  >
                    Location 
                    1
                  </span>
                </DataListCell>,
                <DataListAction
                  aria-label="Actions"
                  aria-labelledby="check-action-item1 check-action-action1"
                  className=""
                  id="check-action-action1"
                >
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={true}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                </DataListAction>,
              ],
              "className": "",
              "isExpanded": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <span
                    id="check-1"
                  >
                    Location 
                    1
                  </span>,
                  "className": "",
                  "width": 1,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Location ",
                      1,
                    ],
                    "id": "check-1",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Location ",
                    1,
                  ],
                  "type": "span",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "aria-label": "Actions",
                  "aria-labelledby": "check-action-item1 check-action-action1",
                  "children": <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={true}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>,
                  "className": "",
                  "id": "check-action-action1",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "aria-label": null,
                    "children": <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />,
                    "className": "",
                    "component": "button",
                    "isActive": false,
                    "isBlock": false,
                    "isDisabled": true,
                    "isFocus": false,
                    "isHover": false,
                    "onClick": [Function],
                    "type": "button",
                    "variant": "link",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "color": "currentColor",
                      "size": "sm",
                      "title": null,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "2",
            "nodeType": "function",
            "props": Object {
              "aria-labelledby": "check-2",
              "children": Array [
                <DataListCell
                  className=""
                  width={1}
                >
                  <span
                    id="check-2"
                  >
                    Location 
                    2
                  </span>
                </DataListCell>,
                <DataListAction
                  aria-label="Actions"
                  aria-labelledby="check-action-item1 check-action-action1"
                  className=""
                  id="check-action-action1"
                >
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                </DataListAction>,
              ],
              "className": "",
              "isExpanded": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <span
                    id="check-2"
                  >
                    Location 
                    2
                  </span>,
                  "className": "",
                  "width": 1,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Location ",
                      2,
                    ],
                    "id": "check-2",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Location ",
                    2,
                  ],
                  "type": "span",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "aria-label": "Actions",
                  "aria-labelledby": "check-action-item1 check-action-action1",
                  "children": <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>,
                  "className": "",
                  "id": "check-action-action1",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "aria-label": null,
                    "children": <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />,
                    "className": "",
                    "component": "button",
                    "isActive": false,
                    "isBlock": false,
                    "isDisabled": false,
                    "isFocus": false,
                    "isHover": false,
                    "onClick": [Function],
                    "type": "button",
                    "variant": "link",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "color": "currentColor",
                      "size": "sm",
                      "title": null,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
          Object {
            "instance": null,
            "key": "3",
            "nodeType": "function",
            "props": Object {
              "aria-labelledby": "check-3",
              "children": Array [
                <DataListCell
                  className=""
                  width={1}
                >
                  <span
                    id="check-3"
                  >
                    Location 
                    3
                  </span>
                </DataListCell>,
                <DataListAction
                  aria-label="Actions"
                  aria-labelledby="check-action-item1 check-action-action1"
                  className=""
                  id="check-action-action1"
                >
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                </DataListAction>,
              ],
              "className": "",
              "isExpanded": true,
            },
            "ref": null,
            "rendered": Array [
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "children": <span
                    id="check-3"
                  >
                    Location 
                    3
                  </span>,
                  "className": "",
                  "width": 1,
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "host",
                  "props": Object {
                    "children": Array [
                      "Location ",
                      3,
                    ],
                    "id": "check-3",
                  },
                  "ref": null,
                  "rendered": Array [
                    "Location ",
                    3,
                  ],
                  "type": "span",
                },
                "type": [Function],
              },
              Object {
                "instance": null,
                "key": undefined,
                "nodeType": "function",
                "props": Object {
                  "aria-label": "Actions",
                  "aria-labelledby": "check-action-item1 check-action-action1",
                  "children": <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>,
                  "className": "",
                  "id": "check-action-action1",
                },
                "ref": null,
                "rendered": Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "aria-label": null,
                    "children": <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />,
                    "className": "",
                    "component": "button",
                    "isActive": false,
                    "isBlock": false,
                    "isDisabled": false,
                    "isFocus": false,
                    "isHover": false,
                    "onClick": [Function],
                    "type": "button",
                    "variant": "link",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "class",
                    "props": Object {
                      "color": "currentColor",
                      "size": "sm",
                      "title": null,
                    },
                    "ref": null,
                    "rendered": null,
                    "type": [Function],
                  },
                  "type": [Function],
                },
                "type": [Function],
              },
            ],
            "type": [Function],
          },
        ],
        "type": [Function],
      },
    ],
    "type": Symbol(react.fragment),
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <br />,
          "Locations: ",
          3,
          <TripData
            distance={10}
            maxDistance={1}
          />,
          <hr />,
          <DataList
            aria-label="Ciao"
            className=""
          >
            <DataListItem
              aria-labelledby="check-1"
              className=""
              isExpanded={true}
            >
              <DataListCell
                className=""
                width={1}
              >
                <span
                  id="check-1"
                >
                  Location 
                  1
                </span>
              </DataListCell>
              <DataListAction
                aria-label="Actions"
                aria-labelledby="check-action-item1 check-action-action1"
                className=""
                id="check-action-action1"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={true}
                  isFocus={false}
                  isHover={false}
                  onClick={[Function]}
                  type="button"
                  variant="link"
                >
                  <TimesIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
              </DataListAction>
            </DataListItem>
            <DataListItem
              aria-labelledby="check-2"
              className=""
              isExpanded={true}
            >
              <DataListCell
                className=""
                width={1}
              >
                <span
                  id="check-2"
                >
                  Location 
                  2
                </span>
              </DataListCell>
              <DataListAction
                aria-label="Actions"
                aria-labelledby="check-action-item1 check-action-action1"
                className=""
                id="check-action-action1"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[Function]}
                  type="button"
                  variant="link"
                >
                  <TimesIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
              </DataListAction>
            </DataListItem>
            <DataListItem
              aria-labelledby="check-3"
              className=""
              isExpanded={true}
            >
              <DataListCell
                className=""
                width={1}
              >
                <span
                  id="check-3"
                >
                  Location 
                  3
                </span>
              </DataListCell>
              <DataListAction
                aria-label="Actions"
                aria-labelledby="check-action-item1 check-action-action1"
                className=""
                id="check-action-action1"
              >
                <Button
                  aria-label={null}
                  className=""
                  component="button"
                  isActive={false}
                  isBlock={false}
                  isDisabled={false}
                  isFocus={false}
                  isHover={false}
                  onClick={[Function]}
                  type="button"
                  variant="link"
                >
                  <TimesIcon
                    color="currentColor"
                    size="sm"
                    title={null}
                  />
                </Button>
              </DataListAction>
            </DataListItem>
          </DataList>,
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "br",
        },
        "Locations: ",
        3,
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "distance": 10,
            "maxDistance": 1,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "host",
          "props": Object {},
          "ref": null,
          "rendered": null,
          "type": "hr",
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "aria-label": "Ciao",
            "children": Array [
              <DataListItem
                aria-labelledby="check-1"
                className=""
                isExpanded={true}
              >
                <DataListCell
                  className=""
                  width={1}
                >
                  <span
                    id="check-1"
                  >
                    Location 
                    1
                  </span>
                </DataListCell>
                <DataListAction
                  aria-label="Actions"
                  aria-labelledby="check-action-item1 check-action-action1"
                  className=""
                  id="check-action-action1"
                >
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={true}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                </DataListAction>
              </DataListItem>,
              <DataListItem
                aria-labelledby="check-2"
                className=""
                isExpanded={true}
              >
                <DataListCell
                  className=""
                  width={1}
                >
                  <span
                    id="check-2"
                  >
                    Location 
                    2
                  </span>
                </DataListCell>
                <DataListAction
                  aria-label="Actions"
                  aria-labelledby="check-action-item1 check-action-action1"
                  className=""
                  id="check-action-action1"
                >
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                </DataListAction>
              </DataListItem>,
              <DataListItem
                aria-labelledby="check-3"
                className=""
                isExpanded={true}
              >
                <DataListCell
                  className=""
                  width={1}
                >
                  <span
                    id="check-3"
                  >
                    Location 
                    3
                  </span>
                </DataListCell>
                <DataListAction
                  aria-label="Actions"
                  aria-labelledby="check-action-item1 check-action-action1"
                  className=""
                  id="check-action-action1"
                >
                  <Button
                    aria-label={null}
                    className=""
                    component="button"
                    isActive={false}
                    isBlock={false}
                    isDisabled={false}
                    isFocus={false}
                    isHover={false}
                    onClick={[Function]}
                    type="button"
                    variant="link"
                  >
                    <TimesIcon
                      color="currentColor"
                      size="sm"
                      title={null}
                    />
                  </Button>
                </DataListAction>
              </DataListItem>,
            ],
            "className": "",
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": "1",
              "nodeType": "function",
              "props": Object {
                "aria-labelledby": "check-1",
                "children": Array [
                  <DataListCell
                    className=""
                    width={1}
                  >
                    <span
                      id="check-1"
                    >
                      Location 
                      1
                    </span>
                  </DataListCell>,
                  <DataListAction
                    aria-label="Actions"
                    aria-labelledby="check-action-item1 check-action-action1"
                    className=""
                    id="check-action-action1"
                  >
                    <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={true}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="link"
                    >
                      <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </DataListAction>,
                ],
                "className": "",
                "isExpanded": true,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <span
                      id="check-1"
                    >
                      Location 
                      1
                    </span>,
                    "className": "",
                    "width": 1,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Location ",
                        1,
                      ],
                      "id": "check-1",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Location ",
                      1,
                    ],
                    "type": "span",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "aria-label": "Actions",
                    "aria-labelledby": "check-action-item1 check-action-action1",
                    "children": <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={true}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="link"
                    >
                      <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>,
                    "className": "",
                    "id": "check-action-action1",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "aria-label": null,
                      "children": <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />,
                      "className": "",
                      "component": "button",
                      "isActive": false,
                      "isBlock": false,
                      "isDisabled": true,
                      "isFocus": false,
                      "isHover": false,
                      "onClick": [Function],
                      "type": "button",
                      "variant": "link",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "color": "currentColor",
                        "size": "sm",
                        "title": null,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "2",
              "nodeType": "function",
              "props": Object {
                "aria-labelledby": "check-2",
                "children": Array [
                  <DataListCell
                    className=""
                    width={1}
                  >
                    <span
                      id="check-2"
                    >
                      Location 
                      2
                    </span>
                  </DataListCell>,
                  <DataListAction
                    aria-label="Actions"
                    aria-labelledby="check-action-item1 check-action-action1"
                    className=""
                    id="check-action-action1"
                  >
                    <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={false}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="link"
                    >
                      <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </DataListAction>,
                ],
                "className": "",
                "isExpanded": true,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <span
                      id="check-2"
                    >
                      Location 
                      2
                    </span>,
                    "className": "",
                    "width": 1,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Location ",
                        2,
                      ],
                      "id": "check-2",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Location ",
                      2,
                    ],
                    "type": "span",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "aria-label": "Actions",
                    "aria-labelledby": "check-action-item1 check-action-action1",
                    "children": <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={false}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="link"
                    >
                      <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>,
                    "className": "",
                    "id": "check-action-action1",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "aria-label": null,
                      "children": <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />,
                      "className": "",
                      "component": "button",
                      "isActive": false,
                      "isBlock": false,
                      "isDisabled": false,
                      "isFocus": false,
                      "isHover": false,
                      "onClick": [Function],
                      "type": "button",
                      "variant": "link",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "color": "currentColor",
                        "size": "sm",
                        "title": null,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
            Object {
              "instance": null,
              "key": "3",
              "nodeType": "function",
              "props": Object {
                "aria-labelledby": "check-3",
                "children": Array [
                  <DataListCell
                    className=""
                    width={1}
                  >
                    <span
                      id="check-3"
                    >
                      Location 
                      3
                    </span>
                  </DataListCell>,
                  <DataListAction
                    aria-label="Actions"
                    aria-labelledby="check-action-item1 check-action-action1"
                    className=""
                    id="check-action-action1"
                  >
                    <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={false}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="link"
                    >
                      <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>
                  </DataListAction>,
                ],
                "className": "",
                "isExpanded": true,
              },
              "ref": null,
              "rendered": Array [
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "children": <span
                      id="check-3"
                    >
                      Location 
                      3
                    </span>,
                    "className": "",
                    "width": 1,
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "host",
                    "props": Object {
                      "children": Array [
                        "Location ",
                        3,
                      ],
                      "id": "check-3",
                    },
                    "ref": null,
                    "rendered": Array [
                      "Location ",
                      3,
                    ],
                    "type": "span",
                  },
                  "type": [Function],
                },
                Object {
                  "instance": null,
                  "key": undefined,
                  "nodeType": "function",
                  "props": Object {
                    "aria-label": "Actions",
                    "aria-labelledby": "check-action-item1 check-action-action1",
                    "children": <Button
                      aria-label={null}
                      className=""
                      component="button"
                      isActive={false}
                      isBlock={false}
                      isDisabled={false}
                      isFocus={false}
                      isHover={false}
                      onClick={[Function]}
                      type="button"
                      variant="link"
                    >
                      <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />
                    </Button>,
                    "className": "",
                    "id": "check-action-action1",
                  },
                  "ref": null,
                  "rendered": Object {
                    "instance": null,
                    "key": undefined,
                    "nodeType": "function",
                    "props": Object {
                      "aria-label": null,
                      "children": <TimesIcon
                        color="currentColor"
                        size="sm"
                        title={null}
                      />,
                      "className": "",
                      "component": "button",
                      "isActive": false,
                      "isBlock": false,
                      "isDisabled": false,
                      "isFocus": false,
                      "isHover": false,
                      "onClick": [Function],
                      "type": "button",
                      "variant": "link",
                    },
                    "ref": null,
                    "rendered": Object {
                      "instance": null,
                      "key": undefined,
                      "nodeType": "class",
                      "props": Object {
                        "color": "currentColor",
                        "size": "sm",
                        "title": null,
                      },
                      "ref": null,
                      "rendered": null,
                      "type": [Function],
                    },
                    "type": [Function],
                  },
                  "type": [Function],
                },
              ],
              "type": [Function],
            },
          ],
          "type": [Function],
        },
      ],
      "type": Symbol(react.fragment),
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;

exports[`Location List Component should render correctly with no routes 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <locationList
    distance="10"
    domicileId={1}
    loadHandler={[MockFunction]}
    maxDistance={1}
    removeHandler={[MockFunction]}
    route={Array []}
    selectHandler={[MockFunction]}
    ws={0}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <CardHeader
          className=""
          component="div"
        >
          Click map to add locations
        </CardHeader>,
        <CardBody
          className=""
          component="div"
        >
          <Button
            aria-label={null}
            className=""
            component="button"
            isActive={false}
            isBlock={false}
            isDisabled={false}
            isFocus={false}
            isHover={false}
            onClick={[MockFunction]}
            style={
              Object {
                "width": "100%",
              }
            }
            type="button"
            variant="primary"
          >
            Load 40 European cities
          </Button>
        </CardBody>,
      ],
      "className": "",
      "component": "article",
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": "Click map to add locations",
          "className": "",
          "component": "div",
        },
        "ref": null,
        "rendered": "Click map to add locations",
        "type": [Function],
      },
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <Button
            aria-label={null}
            className=""
            component="button"
            isActive={false}
            isBlock={false}
            isDisabled={false}
            isFocus={false}
            isHover={false}
            onClick={[MockFunction]}
            style={
              Object {
                "width": "100%",
              }
            }
            type="button"
            variant="primary"
          >
            Load 40 European cities
          </Button>,
          "className": "",
          "component": "div",
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "aria-label": null,
            "children": "Load 40 European cities",
            "className": "",
            "component": "button",
            "isActive": false,
            "isBlock": false,
            "isDisabled": false,
            "isFocus": false,
            "isHover": false,
            "onClick": [MockFunction],
            "style": Object {
              "width": "100%",
            },
            "type": "button",
            "variant": "primary",
          },
          "ref": null,
          "rendered": "Load 40 European cities",
          "type": [Function],
        },
        "type": [Function],
      },
    ],
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <CardHeader
            className=""
            component="div"
          >
            Click map to add locations
          </CardHeader>,
          <CardBody
            className=""
            component="div"
          >
            <Button
              aria-label={null}
              className=""
              component="button"
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              style={
                Object {
                  "width": "100%",
                }
              }
              type="button"
              variant="primary"
            >
              Load 40 European cities
            </Button>
          </CardBody>,
        ],
        "className": "",
        "component": "article",
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": "Click map to add locations",
            "className": "",
            "component": "div",
          },
          "ref": null,
          "rendered": "Click map to add locations",
          "type": [Function],
        },
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <Button
              aria-label={null}
              className=""
              component="button"
              isActive={false}
              isBlock={false}
              isDisabled={false}
              isFocus={false}
              isHover={false}
              onClick={[MockFunction]}
              style={
                Object {
                  "width": "100%",
                }
              }
              type="button"
              variant="primary"
            >
              Load 40 European cities
            </Button>,
            "className": "",
            "component": "div",
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "aria-label": null,
              "children": "Load 40 European cities",
              "className": "",
              "component": "button",
              "isActive": false,
              "isBlock": false,
              "isDisabled": false,
              "isFocus": false,
              "isHover": false,
              "onClick": [MockFunction],
              "style": Object {
                "width": "100%",
              },
              "type": "button",
              "variant": "primary",
            },
            "ref": null,
            "rendered": "Load 40 European cities",
            "type": [Function],
          },
          "type": [Function],
        },
      ],
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
